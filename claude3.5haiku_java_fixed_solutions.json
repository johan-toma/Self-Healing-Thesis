[
    {
        "id": 0,
        "programming_problem_name": "Majority Element",
        "fixed_solution": "```java\nclass Solution {\n    public int majorityElement(int[] nums) {\n        int count = 0;\n        Integer candidate = null;\n        \n        for (int num : nums) {\n            if (count == 0) {\n                candidate = num;\n            }\n            count += (num == candidate) ? 1 : -1;\n        }\n        \n        count = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == candidate) {\n                count++;\n            }\n        }\n        \n        if (count > nums.length / 2) {\n            return candidate;\n        }\n        return -1;\n    }\n}\n```"
    },
    {
        "id": 1,
        "programming_problem_name": "Move Zeroes",
        "fixed_solution": "```java\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int lastNonZeroFoundAt = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                int temp = nums[lastNonZeroFoundAt];\n                nums[lastNonZeroFoundAt] = nums[i];\n                nums[i] = temp;\n                lastNonZeroFoundAt++;\n            }\n        }\n    }\n}\n```"
    },
    {
        "id": 2,
        "programming_problem_name": "Missing Number",
        "fixed_solution": "```java\nclass Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int totalSum = (n * (n + 1)) / 2;\n        int actualSum = 0;\n        for (int i = 0; i < n; i++) {\n            actualSum += nums[i];\n        }\n        return totalSum - actualSum;\n    }\n}\n```"
    },
    {
        "id": 3,
        "programming_problem_name": "Max Consecutive Ones",
        "fixed_solution": "```java\nclass Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        int maxCount = 0;\n        int currentCount = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == 1) {\n                currentCount++;\n            } else {\n                maxCount = Math.max(maxCount, currentCount);\n                currentCount = 0;\n            }\n        }\n        \n        maxCount = Math.max(maxCount, currentCount);\n        return maxCount;\n    }\n}\n```"
    },
    {
        "id": 4,
        "programming_problem_name": "Fibonacci Number",
        "fixed_solution": "```java\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```"
    },
    {
        "id": 5,
        "programming_problem_name": "Reverse Linked List",
        "fixed_solution": "```java\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        while (head != null) {\n            ListNode nextNode = head.next;\n            head.next = prev;\n            prev = head;\n            head = nextNode;\n        }\n        return prev;\n    }\n}\n```"
    },
    {
        "id": 6,
        "programming_problem_name": "Remove Linked List Elements",
        "fixed_solution": "```java\nclass ListNode { int val; ListNode next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } }\nclass Solution { \n    public ListNode removeElements(ListNode head, int val) {\n        while (head != null && head.val == val) {\n            head = head.next;\n        }\n        \n        if (head == null) {\n            return null;\n        }\n        \n        ListNode current = head;\n        while (current.next != null) {\n            if (current.next.val == val) {\n                current.next = current.next.next;\n            } else {\n                current = current.next;\n            }\n        }\n        \n        return head;\n    }\n}\n```"
    },
    {
        "id": 7,
        "programming_problem_name": "Decode String",
        "fixed_solution": "```java\nclass Solution {\n    public String decodeString(String s) {\n        Stack<Integer> counts = new Stack<>();\n        Stack<StringBuilder> result = new Stack<>();\n        StringBuilder current = new StringBuilder();\n        int i = 0;\n        while (i < s.length()) {\n            char ch = s.charAt(i);\n            if (Character.isDigit(ch)) {\n                int count = 0;\n                while (i < s.length() && Character.isDigit(s.charAt(i))) {\n                    count = count * 10 + (s.charAt(i) - '0');\n                    i++;\n                }\n                counts.push(count);\n            } else if (ch == '[') {\n                result.push(current);\n                current = new StringBuilder();\n                i++;\n            } else if (ch == ']') {\n                StringBuilder decodedString = result.pop();\n                int repeatTimes = counts.pop();\n                for (int j = 0; j < repeatTimes; j++) {\n                    decodedString.append(current);\n                }\n                current = decodedString;\n                i++;\n            } else {\n                current.append(ch);\n                i++;\n            }\n        }\n        return current.toString();\n    }\n}\n```"
    },
    {
        "id": 8,
        "programming_problem_name": "Reorder List",
        "fixed_solution": "```java\nclass ListNode { int val; ListNode next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } }\nclass Solution { \n    public void reorderList(ListNode head) { \n        if (head == null || head.next == null) { \n            return; \n        } \n        \n        ListNode slow = head; \n        ListNode fast = head; \n        while (fast.next != null && fast.next.next != null) { \n            slow = slow.next; \n            fast = fast.next.next; \n        } \n        \n        ListNode secondHalf = reverseList(slow.next);\n        slow.next = null;\n        ListNode firstHalf = head; \n        \n        while (firstHalf != null && secondHalf != null) { \n            ListNode temp1 = firstHalf.next; \n            ListNode temp2 = secondHalf.next; \n            \n            firstHalf.next = secondHalf; \n            secondHalf.next = temp1; \n            \n            firstHalf = temp1; \n            secondHalf = temp2; \n        } \n    } \n    \n    private ListNode reverseList(ListNode head) { \n        ListNode prev = null; \n        while (head != null) { \n            ListNode nextNode = head.next; \n            head.next = prev; \n            prev = head; \n            head = nextNode; \n        } \n        return prev; \n    } \n}\n```"
    },
    {
        "id": 9,
        "programming_problem_name": "Merge Sorted Array",
        "fixed_solution": "```java\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i = m - 1;\n        int j = n - 1;\n        int k = m + n - 1;\n        \n        while (i >= 0 && j >= 0) {\n            if (nums1[i] > nums2[j]) {\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                nums1[k] = nums2[j];\n                j--;\n            }\n            k--;\n        }\n        \n        while (j >= 0) {\n            nums1[k] = nums2[j];\n            k--;\n            j--;\n        }\n    }\n}\n```"
    },
    {
        "id": 10,
        "programming_problem_name": "Average Salary Excluding the Minimum and Maximum Salary",
        "fixed_solution": "```java\nclass Solution {\n    public double average(int[] salary) {\n        int n = salary.length;\n        int minSalary = salary[0];\n        int maxSalary = salary[0];\n        int sum = 0;\n        \n        for (int i = 0; i < n; i++) {\n            sum += salary[i];\n            minSalary = Math.min(minSalary, salary[i]);\n            maxSalary = Math.max(maxSalary, salary[i]);\n        }\n        \n        sum -= minSalary;\n        sum -= maxSalary;\n        \n        return sum / (double) (n - 2);\n    }\n}\n```"
    },
    {
        "id": 11,
        "programming_problem_name": "How many Numbers are Smaller than the current number",
        "fixed_solution": "```java\nclass Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            for (int j = 0; j < n; j++) {\n                if (nums[j] < nums[i] && j != i) {\n                    count++;\n                }\n            }\n            result[i] = count;\n        }\n        return result;\n    }\n}\n```"
    },
    {
        "id": 12,
        "programming_problem_name": "Modify the Matrix",
        "fixed_solution": "```java\nclass Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[][] answer = new int[m][n];\n        \n        // Copy matrix to answer\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                answer[i][j] = matrix[i][j];\n            }\n        }\n        \n        for (int j = 0; j < n; j++) {\n            int maxInColumn = findMaxInColumn(matrix, j);\n            for (int i = 0; i < m; i++) {\n                if (answer[i][j] == -1) {\n                    answer[i][j] = maxInColumn;\n                }\n            }\n        }\n        return answer;\n    }\n    \n    private int findMaxInColumn(int[][] matrix, int col) {\n        int maxVal = Integer.MIN_VALUE;\n        for (int i = 0; i < matrix.length; i++) {\n            maxVal = Math.max(maxVal, matrix[i][col]);\n        }\n        return maxVal;\n    }\n}\n```"
    },
    {
        "id": 13,
        "programming_problem_name": "Continous Subarray Sum",
        "fixed_solution": "```java\nclass Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        HashMap<Integer, Integer> modMap = new HashMap<>();\n        modMap.put(0, -1);\n        int cumulativeSum = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            cumulativeSum += nums[i];\n            \n            if (k != 0) {\n                cumulativeSum = cumulativeSum % k;\n            }\n            \n            if (modMap.containsKey(cumulativeSum)) {\n                if (i - modMap.get(cumulativeSum) > 1) {\n                    return true;\n                }\n            } else {\n                modMap.put(cumulativeSum, i);\n            }\n        }\n        \n        return false;\n    }\n}\n```"
    },
    {
        "id": 14,
        "programming_problem_name": "Insert Delete GetRandom O(1)",
        "fixed_solution": "```java\nclass RandomizedSet {\n    private Map<Integer, Integer> valueToIndex;\n    private List<Integer> values;\n    private Random rand;\n\n    public RandomizedSet() {\n        valueToIndex = new HashMap<>();\n        values = new ArrayList<>();\n        rand = new Random();\n    }\n    \n    public boolean insert(int val) {\n        if (valueToIndex.containsKey(val)) {\n            return false;\n        }\n        valueToIndex.put(val, values.size());\n        values.add(val);\n        return true;\n    }\n    \n    public boolean remove(int val) {\n        if (!valueToIndex.containsKey(val)) {\n            return false;\n        }\n        int index = valueToIndex.get(val);\n        int lastElement = values.get(values.size() - 1);\n        \n        values.set(index, lastElement);\n        valueToIndex.put(lastElement, index);\n        \n        values.remove(values.size() - 1);\n        valueToIndex.remove(val);\n        \n        return true;\n    }\n    \n    public int getRandom() {\n        int randomIndex = rand.nextInt(values.size());\n        return values.get(randomIndex);\n    }\n}\n```"
    },
    {
        "id": 15,
        "programming_problem_name": "Permutation Sequence",
        "fixed_solution": "```java\nclass Solution {\n    public String getPermutation(int n, int k) {\n        List<Integer> numbers = new ArrayList<>();\n        int[] factorials = new int[n + 1];\n        \n        for (int i = 1; i <= n; i++) {\n            numbers.add(i);\n        }\n        \n        factorials[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n        }\n        \n        k--;\n        \n        StringBuilder sb = new StringBuilder();\n        for (int i = n; i > 0; i--) {\n            int index = k / factorials[i - 1];\n            k %= factorials[i - 1];\n            sb.append(numbers.get(index));\n            numbers.remove(index);\n        }\n        \n        return sb.toString();\n    }\n}\n```"
    },
    {
        "id": 16,
        "programming_problem_name": "Island Perimeter",
        "fixed_solution": "```java\nclass Solution {\n    public int islandPerimeter(int[][] grid) {\n        int perimeter = 0;\n        int rows = grid.length;\n        int cols = grid[0].length;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == 1) {\n                    perimeter += 4;\n                    if (i > 0 && grid[i - 1][j] == 1) {\n                        perimeter -= 2;\n                    }\n                    if (j > 0 && grid[i][j - 1] == 1) {\n                        perimeter -= 2;\n                    }\n                }\n            }\n        }\n        return perimeter;\n    }\n}\n```"
    },
    {
        "id": 17,
        "programming_problem_name": "Reshape the Matrix",
        "fixed_solution": "```java\nclass Solution {\n    public int[][] matrixReshape(int[][] mat, int r, int c) {\n        int m = mat.length;\n        int n = mat[0].length;\n        \n        if (m * n != r * c) {\n            return mat;\n        }\n        \n        int[][] reshaped = new int[r][c];\n        int row = 0;\n        int col = 0;\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                reshaped[row][col] = mat[i][j];\n                col++;\n                \n                if (col == c) {\n                    row++;\n                    col = 0;\n                }\n            }\n        }\n        \n        return reshaped;\n    }\n}\n```"
    },
    {
        "id": 18,
        "programming_problem_name": "Flipping an Image",
        "fixed_solution": "```java\nclass Solution {\n    public int[][] flipAndInvertImage(int[][] image) {\n        int n = image.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = image[i][j];\n                image[i][j] = image[i][n - j - 1];\n                image[i][n - j - 1] = temp;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                image[i][j] = image[i][j] == 0 ? 1 : 0;\n            }\n        }\n        return image;\n    }\n}\n```"
    },
    {
        "id": 19,
        "programming_problem_name": "Matrix Diagonal Sum",
        "fixed_solution": "```java\nclass Solution {\n    public int diagonalSum(int[][] mat) {\n        int n = mat.length;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += mat[i][i];\n            sum += mat[i][n - i - 1];\n        }\n        \n        if (n % 2 != 0) {\n            sum -= mat[n / 2][n / 2];\n        }\n        \n        return sum;\n    }\n}\n```"
    },
    {
        "id": 20,
        "programming_problem_name": "Valid Sodoku",
        "fixed_solution": "```java\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        HashSet<Character>[] rows = new HashSet[9];\n        HashSet<Character>[] cols = new HashSet[9];\n        HashSet<Character>[] boxes = new HashSet[9];\n        \n        for (int i = 0; i < 9; i++) {\n            rows[i] = new HashSet<>();\n            cols[i] = new HashSet<>();\n            boxes[i] = new HashSet<>();\n        }\n        \n        for (int row = 0; row < 9; row++) {\n            for (int col = 0; col < 9; col++) {\n                char num = board[row][col];\n                if (num == '.') continue;\n                \n                if (rows[row].contains(num)) {\n                    return false;\n                }\n                rows[row].add(num);\n                \n                if (cols[col].contains(num)) {\n                    return false;\n                }\n                cols[col].add(num);\n                \n                int boxIndex = (row / 3) * 3 + (col / 3);\n                if (boxes[boxIndex].contains(num)) {\n                    return false;\n                }\n                boxes[boxIndex].add(num);\n            }\n        }\n        return true;\n    }\n}\n```"
    },
    {
        "id": 21,
        "programming_problem_name": "Minimum Window Substring",
        "fixed_solution": "```java\nclass Solution {\n    public String minWindow(String s, String t) {\n        Map<Character, Integer> targetMap = new HashMap<>();\n        for (char c : t.toCharArray()) {\n            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);\n        }\n        \n        Map<Character, Integer> windowMap = new HashMap<>();\n        int left = 0, right = 0;\n        int required = targetMap.size();\n        int formed = 0;\n        int[] ans = {-1, 0, 0};\n        \n        while (right < s.length()) {\n            char c = s.charAt(right);\n            windowMap.put(c, windowMap.getOrDefault(c, 0) + 1);\n            \n            if (targetMap.containsKey(c) && windowMap.get(c).intValue() == targetMap.get(c).intValue()) {\n                formed++;\n            }\n            \n            while (left <= right && formed == required) {\n                c = s.charAt(left);\n                \n                if (ans[0] == -1 || right - left + 1 < ans[0]) {\n                    ans[0] = right - left + 1;\n                    ans[1] = left;\n                    ans[2] = right;\n                }\n                \n                windowMap.put(c, windowMap.get(c) - 1);\n                if (targetMap.containsKey(c) && windowMap.get(c).intValue() < targetMap.get(c).intValue()) {\n                    formed--;\n                }\n                \n                left++;\n            }\n            \n            right++;\n        }\n        \n        return ans[0] == -1 ? \"\" : s.substring(ans[1], ans[2] + 1);\n    }\n}\n```"
    },
    {
        "id": 22,
        "programming_problem_name": "Group Anagrams",
        "fixed_solution": "```java\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> map = new HashMap<>();\n        for (String str : strs) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            String sortedStr = new String(chars);\n            if (!map.containsKey(sortedStr)) {\n                map.put(sortedStr, new ArrayList<>());\n            }\n            map.get(sortedStr).add(str);\n        }\n        return new ArrayList<>(map.values());\n    }\n}\n```"
    },
    {
        "id": 23,
        "programming_problem_name": "Zigzag Conversion",
        "fixed_solution": "```java\nclass Solution {\n    public String convert(String s, int numRows) {\n        if (numRows == 1) return s;\n        \n        StringBuilder[] rows = new StringBuilder[numRows];\n        for (int i = 0; i < numRows; i++) {\n            rows[i] = new StringBuilder();\n        }\n        \n        int currentRow = 0;\n        boolean goingDown = false;\n        \n        for (int i = 0; i < s.length(); i++) {\n            rows[currentRow].append(s.charAt(i));\n            \n            if (currentRow == 0 || currentRow == numRows - 1) {\n                goingDown = !goingDown;\n            }\n            \n            currentRow += goingDown ? 1 : -1;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (StringBuilder row : rows) {\n            result.append(row);\n        }\n        \n        return result.toString();\n    }\n}\n```"
    },
    {
        "id": 24,
        "programming_problem_name": "Valid Parentheses",
        "fixed_solution": "```java\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || \n                    (c == '}' && top != '{') || \n                    (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n```"
    },
    {
        "id": 25,
        "programming_problem_name": "Find the Index of the first occurence in a string",
        "fixed_solution": "```java\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int haystackLength = haystack.length();\n        int needleLength = needle.length();\n        \n        for (int i = 0; i <= haystackLength - needleLength; i++) {\n            if (haystack.substring(i, i + needleLength).equals(needle)) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}\n```"
    },
    {
        "id": 26,
        "programming_problem_name": "Maximum Nesting Depth of the parentheses",
        "fixed_solution": "```java\nclass Solution {\n    public int maxDepth(String s) {\n        int maxDepth = 0;\n        int currentDepth = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n        return maxDepth;\n    }\n}\n```"
    },
    {
        "id": 27,
        "programming_problem_name": "Remove All adjacent duplicates in string",
        "fixed_solution": "```java\nclass Solution {\n    public String removeDuplicates(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            if (!stack.isEmpty() && stack.peek() == currentChar) {\n                stack.pop();\n            } else {\n                stack.push(currentChar);\n            }\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < stack.size(); i++) {\n            result.append(stack.get(i));\n        }\n        return result.toString();\n    }\n}\n```"
    }
]
[
    {
        "id": 0,
        "programming_problem_name": "Majority Element",
        "fixed_solution": "```java\nclass Solution { \n    public int majorityElement(int[] nums) {\n        int count = 0; \n        int candidate = null; \n        for (int num : nums) {\n            if (count == 0) { \n                candidate = num; \n            } \n            count += (num == candidate)? 1 : -1; \n        } \n        count = 0; \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == candidate) {\n                count++; \n            } \n        } \n        if (count > nums.length / 2) {\n            return candidate; \n        } \n        return -1; \n    } \n}\n```"
    },
    {
        "id": 1,
        "programming_problem_name": "Move Zeroes",
        "fixed_solution": "class Solution { \npublic void moveZeroes(int[] nums) { \nint lastNonZeroFoundAt = 0; \nfor (int i = 0; i < nums.length; i++) { \nif (nums[i]!= 0) { \nint temp = nums[lastNonZeroFoundAt]; nums[lastNonZeroFoundAt] = nums[i]; nums[i] = temp; \nlastNonZeroFoundAt++; \n} \n} \n}"
    },
    {
        "id": 2,
        "programming_problem_name": "Missing Number",
        "fixed_solution": "Missing Number\nIn this code, there is a logical error. The variable `actualSum` is declared and initialized inside the for loop which includes the range of indices. So when the loop finishes, `actualSum` includes all the elements of the array which is not needed. So the missing number is found by subtracting `actualSum` from `totalSum`.\n\n```java\nclass Solution { public int missingNumber(int[] nums) { int n = nums.length; int totalSum = (n * (n + 1)) / 2; int actualSum = 0; for (int i = 0; i < n; i++) { actualSum += nums[i]; } return totalSum - actualSum; } }\n```\n\nIf you compile this code, you'll get the output 0. This is because the missing number is 0. But this is not the correct answer because 0 is not in the range [0, n] of the array. So the correct answer is `n`."
    },
    {
        "id": 3,
        "programming_problem_name": "Max Consecutive Ones",
        "fixed_solution": "```java\nclass Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        int maxCount = 0;\n        int currentCount = 0;\n        for (int num : nums) {\n            if (num == 1) {\n                currentCount++;\n            } else {\n                maxCount = Math.max(maxCount, currentCount);\n                currentCount = 0;\n            }\n        }\n        maxCount = Math.max(maxCount, currentCount);\n        return maxCount;\n    }\n}\n```"
    },
    {
        "id": 4,
        "programming_problem_name": "Fibonacci Number",
        "fixed_solution": "class Solution { \npublic int fib(int n) { \nif (n == 0) return 0; \nif (n == 1) return 1; \nreturn fib(n - 1) + fib(n + 1); \n} \n}"
    },
    {
        "id": 5,
        "programming_problem_name": "Reverse Linked List",
        "fixed_solution": "```java\nclass ListNode { int val; ListNode next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val, ListNode next) { this.val = val; this.next = next; } }\nclass Solution { \n    public ListNode reverseList(ListNode head) { \n        ListNode prev = null; \n        ListNode current = head; \n        while (current!= null) { \n            ListNode nextNode = current.next; \n            current.next = prev; \n            prev = current; \n            current = nextNode; \n        } \n        return prev; \n    } \n}\n```"
    },
    {
        "id": 6,
        "programming_problem_name": "Remove Linked List Elements",
        "fixed_solution": "Remove Linked List Elements\n```java\nclass Solution { \n    public ListNode removeElements(ListNode head, int val) { \n        if (head == null || head.val!= val) { \n            return head; \n        } \n        ListNode current = head; \n        while (current.next!= null && current.next.val!= val) { \n            current = current.next; \n        } \n        return current == null? head : current.next; \n    } \n}\n```"
    },
    {
        "id": 7,
        "programming_problem_name": "Decode String",
        "fixed_solution": "```java\nclass Solution {\n    public String decodeString(String s) {\n        Stack<Integer> counts = new Stack<>();\n        Stack<StringBuilder> result = new Stack<>();\n        StringBuilder current = new StringBuilder();\n        int i = 0;\n        while (i <= s.length()) {\n            char ch = s.charAt(i);\n            if (Character.isDigit(ch)) {\n                int count = 0;\n                while (i < s.length() && Character.isDigit(s.charAt(i))) {\n                    count = count * 10 + (s.charAt(i) - '0');\n                    i++;\n                }\n                counts.push(count);\n            } else if (ch == '[') {\n                result.push(current);\n                current = new StringBuilder();\n                i++;\n            } else if (ch == ']') {\n                if (!result.isEmpty()) {\n                    StringBuilder decodedString = result.pop();\n                    if (!counts.isEmpty()) {\n                        int repeatTimes = counts.pop();\n                        for (int j = 0; j < repeatTimes; j++) {\n                            decodedString.append(current);\n                        }\n                    }\n                    current = decodedString;\n                }\n                i++;\n            } else {\n                current.append(ch);\n            }\n        }\n        if (!result.isEmpty()) {\n            StringBuilder decodedString = result.pop();\n            if (!counts.isEmpty()) {\n                int repeatTimes = counts.pop();\n                for (int j = 0; j < repeatTimes; j++) {\n                    decodedString.append(current);\n                }\n            }\n            return decodedString.toString();\n        } else {\n            return current.toString();\n        }\n    }\n}\n```"
    },
    {
        "id": 8,
        "programming_problem_name": "Reorder List",
        "fixed_solution": "class ListNode { \n    int val; \n    ListNode next; \n    ListNode() {} \n    ListNode(int val) { \n        this.val = val; \n    } \n    ListNode(int val, ListNode next) { \n        this.val = val; \n        this.next = next; \n    } \n} \nclass Solution { \n    public void reorderList(ListNode head) { \n        if (head == null || head.next == null) { \n            return; \n        } \n        ListNode slow = head; \n        ListNode fast = head; \n        while (fast!= null && fast.next!= null) { \n            slow = slow.next; \n            fast = fast.next.next; \n        } \n        ListNode secondHalf = reverseList(slow); \n        ListNode firstHalf = head; \n        while (firstHalf!= null && secondHalf!= null) { \n            ListNode temp1 = firstHalf.next; \n            ListNode temp2 = secondHalf.next; \n            firstHalf.next = secondHalf; \n            if (temp1!= null) { \n                secondHalf.next = temp1; \n            } \n            firstHalf = temp1; \n            secondHalf = temp2; \n        } \n        if (firstHalf!= null) { \n            firstHalf.next = null; \n        } \n    } \n    private ListNode reverseList(ListNode head) { \n        ListNode prev = null; \n        while (head!= null) { \n            ListNode nextNode = head.next; \n            head.next = prev; \n            prev = head; \n            head = nextNode; \n        } \n        return prev; \n    } \n}"
    },
    {
        "id": 9,
        "programming_problem_name": "Merge Sorted Array",
        "fixed_solution": "```java\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i = m - 1, j = n - 1, k = m + n - 1;\n        \n        while (i >= 0 && j >= 0) {\n            if (nums1[i] > nums2[j]) {\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                nums1[k] = nums2[j];\n                j--;\n            }\n            k--;\n        }\n        \n        while (j >= 0) {\n            nums1[k] = nums2[j];\n            k--;\n            j--;\n        }\n    }\n}\n```"
    },
    {
        "id": 10,
        "programming_problem_name": "Average Salary Excluding the Minimum and Maximum Salary",
        "fixed_solution": "Average Salary Excluding the Minimum and Maximum Salary\n=====================================================\n\n```java\nclass Solution {\n    public double average(int[] salary) {\n        int n = salary.length;\n        int minSalary = Integer.MAX_VALUE; // Changed from -100000000 to Integer.MAX_VALUE\n        int maxSalary = Integer.MIN_VALUE; // Changed from 100000000 to Integer.MIN_VALUE\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += salary[i];\n            if (salary[i] < minSalary) {\n                minSalary = salary[i];\n            }\n            if (salary[i] > maxSalary) {\n                maxSalary = salary[i];\n            }\n        }\n        sum -= minSalary;\n        sum -= maxSalary;\n        return (double) sum / (n - 2);\n    }\n}\n```"
    },
    {
        "id": 11,
        "programming_problem_name": "How many Numbers are Smaller than the current number",
        "fixed_solution": "Here is the corrected code:\n\n```java\nclass Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            int count = 1;\n            for (int j = 0; j < n; j++) {\n                if (j!= i && nums[j] < nums[i]) {\n                    count++;\n                }\n            }\n            result[i] = count;\n        }\n        return result;\n    }\n}\n```\n\nExplanation:\n\nThe issue in the original code is that the loop should iterate until `i` is equal to `n - 1` instead of `n` because we're using `i <= n` which will cause an `ArrayIndexOutOfBoundsException`. Also, the condition `j!= i` is not necessary and has been removed."
    },
    {
        "id": 12,
        "programming_problem_name": "Modify the Matrix",
        "fixed_solution": "```java\nclass Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[][] answer = new int[m][n];\n\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (answer[i][j] == -1) {\n                    int maxInColumn = findMaxInColumn(matrix, j, m);\n                    answer[i][j] = maxInColumn;\n                }\n            }\n        }\n\n        return answer;\n    }\n\n    private int findMaxInColumn(int[][] matrix, int col, int rows) {\n        int maxVal = -1;\n        for (int i = 0; i < rows; i++) {\n            if (matrix[i][col] >= maxVal) {\n                maxVal = matrix[i][col];\n            }\n        }\n\n        return maxVal;\n    }\n}\n```"
    },
    {
        "id": 13,
        "programming_problem_name": "Continous Subarray Sum",
        "fixed_solution": "```java\nclass Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        HashMap<Integer, Integer> modMap = new HashMap<>();\n        modMap.put(0, -1);\n        int cumulativeSum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            cumulativeSum += nums[i];\n            if (k!= 0) {\n                cumulativeSum %= k;\n            }\n            if (modMap.containsKey(cumulativeSum)) {\n                if (i - modMap.get(cumulativeSum) > 1) {\n                    return true;\n                }\n            } else {\n                modMap.put(cumulativeSum, i);\n            }\n        }\n        return false;\n    }\n}\n```"
    },
    {
        "id": 14,
        "programming_problem_name": "Insert Delete GetRandom O(1)",
        "fixed_solution": "Insert Delete GetRandom O(1)\n\nclass RandomizedSet {\n    private HashMap<Integer, Integer> valueToIndex;\n    private List<Integer> values;\n    private Random rand;\n\n    public RandomizedSet() {\n        valueToIndex = new HashMap<>();\n        values = new ArrayList<>();\n        rand = new Random();\n    }\n\n    public boolean insert(int val) {\n        valueToIndex.put(val, values.size());\n        values.add(val);\n        return true;\n    }\n\n    public boolean remove(int val) {\n        if (!valueToIndex.containsKey(val)) {\n            return false;\n        }\n        int index = valueToIndex.get(val);\n        int lastElement = values.get(values.size() - 1);\n        valueToIndex.put(lastElement, index);\n        values.remove(values.size() - 1);\n        valueToIndex.remove(val);\n        if (val % 2 == 0) {\n            valueToIndex.put(lastElement, index + 1);\n        }\n        return true;\n    }\n\n    public int getRandom() {\n        int randomIndex = rand.nextInt(values.size() + 1);\n        return values.get(randomIndex);\n    }\n}"
    },
    {
        "id": 15,
        "programming_problem_name": "Permutation Sequence",
        "fixed_solution": "class Solution { public String getPermutation(int n, int k) { List<Integer> numbers = new ArrayList<>(); int[] factorials = new int[n + 1]; for (int i = 1; i <= n; i++) { numbers.add(i); } factorials[0] = 1; for (int i = 1; i <= n; i++) { factorials[i] = factorials[i - 1] * i; if (factorials[i] < 0) { factorials[i] = Integer.MAX_VALUE; } } k--; if (k > factorials[n - 1]) { k = k * 10; } StringBuilder sb = new StringBuilder(); for (int i = n; i > 0; i--) { int index = k / factorials[i - 1]; k %= factorials[i - 1]; sb.append(numbers.get(index)); numbers.remove(index); } return sb.toString(); } }"
    },
    {
        "id": 16,
        "programming_problem_name": "Island Perimeter",
        "fixed_solution": "\n\n```java\nclass Solution { \n    public int islandPerimeter(int[][] grid) { \n        int perimeter = 0; \n        int rows = grid.length; \n        int cols = grid[0].length; \n        for (int i = 0; i < rows; i++) { \n            for (int j = 0; j < cols; j++) { \n                if (grid[i][j] == 1) { \n                    // Check if it's part of the border or the top/bottom\n                    if (i == 0 || grid[i - 1][j] == 0) { perimeter++; } \n                    if (i == rows - 1 || grid[i + 1][j] == 0) { perimeter++; } \n                    if (j == 0 || grid[i][j - 1] == 0) { perimeter++; } \n                    if (j == cols - 1 || grid[i][j + 1] == 0) { perimeter++; } \n                } \n            } // for loop\n        } // inner for loop\n        return perimeter; \n    // Corrected logic\n    }\n}\n```"
    },
    {
        "id": 17,
        "programming_problem_name": "Reshape the Matrix",
        "fixed_solution": "```java\nclass Solution {\n    public int[][] matrixReshape(int[][] mat, int r, int c) {\n        int m = mat.length;\n        int n = mat[0].length;\n        if (m * n!= r * c) {\n            return mat;\n        }\n        int[][] reshaped = new int[r][c];\n        int row = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < c; j++) {\n                reshaped[row][j] = mat[i][j];\n                row++;\n                if (row == r) {\n                    row = 0;\n                    j = 0;\n                }\n            }\n        }\n        return reshaped;\n    }\n}\n```"
    },
    {
        "id": 18,
        "programming_problem_name": "Flipping an Image",
        "fixed_solution": "Here is the corrected Java code:\n\n```java\nclass Solution {\n    public int[][] flipAndInvertImage(int[][] image) {\n        int n = image.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = image[i][j];\n                image[i][j] = image[n - 1 - i][j];\n                image[n - 1 - i][j] = temp;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                image[i][j] = image[i][j] == 0? 1 : 0;\n            }\n        }\n        return image;\n    }\n}\n```"
    },
    {
        "id": 19,
        "programming_problem_name": "Matrix Diagonal Sum",
        "fixed_solution": "Here is the corrected code:\n\n```java\nclass Solution {\n    public int diagonalSum(int[][] mat) {\n        int n = mat.length;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += mat[i][i];\n            sum += mat[n - i - 1][n - i - 1];\n        }\n        return sum;\n    }\n}\n```\n\nThe source of the error is the `for` loop condition, where `i <= n` is used instead of `i < n`. This is causing the loop to run one extra time, resulting in incorrect diagonal sums."
    },
    {
        "id": 20,
        "programming_problem_name": "Valid Sodoku",
        "fixed_solution": "```java\nclass Solution { public boolean isValidSudoku(char[][] board) { HashSet<Character>[] rows = new HashSet[9]; HashSet<Character>[] cols = new HashSet[9]; HashSet<Character>[] boxes = new HashSet[9]; int[] boxIndex = new int[9]; for (int i = 0; i < 9; i++) { rows[i] = new HashSet<>(); cols[i] = new HashSet<>(); boxes[i] = new HashSet<>(); for (int j = 0; j < 9; j++) { if (i % 2 == 0) { if (j % 3 == 1) { rows[i].add(board[j][j]); } else { cols[j].add(board[j][i]); } } else { if (j % 3 == 0) { rows[i].add(board[i][j]); } else { cols[i].add(board[j][j]); } } boxIndex[i] = (i / 3) * 3 + (j / 3); } } for (int i = 0; i < 9; i++) { for (int j = 0; j < 9; j++) { char num = board[i][j]; if (num == '.') continue; if (rows[i].contains(num)) { return false; } rows[i].add(num); if (cols[j].contains(num)) { return false; } cols[j].add(num); int boxIndexI = (i / 3) * 3; int boxIndexJ = (j / 3); if (boxes[boxIndexI].contains(num)) { return false; } if (boxes[boxIndexJ].contains(num)) { return false; } boxes[boxIndexI].add(num); boxes[boxIndexJ].add(num); } } return true; } }\n```"
    },
    {
        "id": 21,
        "programming_problem_name": "Minimum Window Substring",
        "fixed_solution": "```java\nclass Solution {\n    public String minWindow(String s, String t) {\n        Map<Character, Integer> targetMap = new HashMap<>();\n        Map<Character, Integer> windowMap = new HashMap<>();\n        int left = 0, right = 0, required = targetMap.size();\n        int formed = 0;\n        int[] ans = new int[]{-1, 0, 0};\n        while (right < s.length()) {\n            char c = s.charAt(right);\n            windowMap.put(c, windowMap.getOrDefault(c, 0) + 1);\n            if (targetMap.containsKey(c) && windowMap.get(c).intValue() == targetMap.get(c).intValue()) {\n                formed++;\n            }\n            while (left < right && formed >= required) {\n                c = s.charAt(left);\n                if (ans[0] == -1 || right - left + 1 < ans[0]) {\n                    ans[0] = right - left + 1;\n                    ans[1] = left;\n                    ans[2] = right;\n                }\n                windowMap.put(c, windowMap.get(c) - 1);\n                if (targetMap.containsKey(c) && windowMap.get(c).intValue() < targetMap.get(c).intValue()) {\n                    formed--;\n                }\n                left++;\n            }\n            if (right + 2 < s.length()) {\n                right += 2;\n            } else {\n                right++;\n            }\n        }\n        return ans[0] == -1? null : s.substring(ans[1], ans[2] + 1);\n    }\n}\n```"
    },
    {
        "id": 22,
        "programming_problem_name": "Group Anagrams",
        "fixed_solution": "```\nclass Solution { public List<List<String>> groupAnagrams(String[] strs) { Map<String, List<String>> map = new HashMap<>(); for (String str : strs) { char[] chars = str.toLowerCase().toCharArray(); String sortedStr = new String(chars); if (!map.containsKey(sortedStr)) { map.put(sortedStr, new ArrayList<>()); } map.get(sortedStr).add(str); } return new ArrayList<>(map.values()); }\n```"
    },
    {
        "id": 23,
        "programming_problem_name": "Zigzag Conversion",
        "fixed_solution": "```java\nclass Solution { public String convert(String s, int numRows) { int n = s.length(); int[][] dp = new int[numRows][2]; StringBuilder[][] rows = new StringBuilder[numRows][];\n\nfor (int i = 0; i < numRows; i++) {\n    rows[i] = new StringBuilder[numRows];\n    dp[i][0] = s.charAt(i) - '0';\n    dp[i][1] = 0;\n}\n\nfor (int i = 1; i < numRows; i++) {\n    for (int j = 0; j < numRows - 1; j++) {\n        int k = j + Math.abs(dp[j][1] - dp[j][0]);\n        if (k < 0 || k >= numRows - 1) k = 0;\n        rows[j][k] = new StringBuilder();\n        if (j == 0) {\n            rows[j][k].append(s.charAt(i));\n        } else if (j == numRows - 1) {\n            rows[j][k].append(s.charAt(i));\n        } else {\n            rows[j][k].append(s.charAt(i));\n        }\n        dp[j][0] = s.charAt(i) - '0';\n        dp[j][1] = k + 1;\n    }\n}\n\nStringBuilder result = new StringBuilder();\nfor (StringBuilder row : rows) {\n    result.append(row);\n}\n\nreturn result.toString();\n}\n```"
    },
    {
        "id": 24,
        "programming_problem_name": "Valid Parentheses",
        "fixed_solution": "```java\nclass Solution { public boolean isValid(String s) { Stack<Character> stack = new Stack<>(); for (char c : s.toCharArray()) { if (c == '(' || c == '{' || c == '[') { stack.push(c); } else { if (stack.isEmpty()) return false; char top = stack.pop(); if (c == ')' && top == '(') return false; else if (c == '}' && top == '{') return false; else if (c == ']' && top == '[') return false; } } return stack.isEmpty(); } }\n```"
    },
    {
        "id": 25,
        "programming_problem_name": "Find the Index of the first occurence in a string",
        "fixed_solution": "```\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int haystackLength = haystack.length();\n        int needleLength = needle.length();\n        for (int i = 0; i <= haystackLength - needleLength; i++) {\n            if (haystack.substring(i, i + needleLength).equals(needle)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n```"
    },
    {
        "id": 26,
        "programming_problem_name": "Maximum Nesting Depth of the parentheses",
        "fixed_solution": "```\nclass Solution {\n    public int maxDepth(String s) {\n        int maxDepth = 0; int currentDepth = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n        return maxDepth;\n    }\n}\n```"
    },
    {
        "id": 27,
        "programming_problem_name": "Remove All adjacent duplicates in string",
        "fixed_solution": "```\nclass Solution { \n    public String removeDuplicates(String s) { \n        Stack<Character> stack = new Stack<>(); \n        for (int i = 0; i < s.length(); i++) { \n            char currentChar = s.charAt(i); \n            if (!stack.isEmpty() && stack.peek() == currentChar) { \n                stack.pop(); \n            } else { \n                stack.push(currentChar); \n            } \n        } \n        StringBuilder result = new StringBuilder(); \n        for (int i = 0; i < stack.size(); i++) { \n            result.append(stack.get(i)); \n        } \n        return result.toString(); \n    } \n}\n```"
    }
]